//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.33440.
// 
namespace Namek.Library.AutomationApi.ViettelIdc
{
    // 
    // This source code was auto-generated by wsdl, Version=4.0.30319.33440.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "IdcToolsSoap", Namespace = "http://api-utils.viettelidc.com.vn/")]
    public partial class ViettelIDCTool : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback sendToBCCSOperationCompleted;

        private System.Threading.SendOrPostCallback Verify_LoginOperationCompleted;

        private System.Threading.SendOrPostCallback sendMailOperationCompleted;

        private System.Threading.SendOrPostCallback sendMailFromOperationCompleted;

        private System.Threading.SendOrPostCallback sendMailAttachOperationCompleted;

        private System.Threading.SendOrPostCallback getInPoolOperationCompleted;

        private System.Threading.SendOrPostCallback updatePoolOperationCompleted;

        private System.Threading.SendOrPostCallback updateIpPoolOperationCompleted;

        private System.Threading.SendOrPostCallback ossGetIpStatusOperationCompleted;

        private System.Threading.SendOrPostCallback ossUpdateIpStatusOperationCompleted;

        /// <remarks/>
        public ViettelIDCTool(string url)
        {
            this.Url = url;
        }

        /// <remarks/>
        public event sendToBCCSCompletedEventHandler sendToBCCSCompleted;

        /// <remarks/>
        public event Verify_LoginCompletedEventHandler Verify_LoginCompleted;

        /// <remarks/>
        public event sendMailCompletedEventHandler sendMailCompleted;

        /// <remarks/>
        public event sendMailFromCompletedEventHandler sendMailFromCompleted;

        /// <remarks/>
        public event sendMailAttachCompletedEventHandler sendMailAttachCompleted;

        /// <remarks/>
        public event getInPoolCompletedEventHandler getInPoolCompleted;

        /// <remarks/>
        public event updatePoolCompletedEventHandler updatePoolCompleted;

        /// <remarks/>
        public event updateIpPoolCompletedEventHandler updateIpPoolCompleted;

        /// <remarks/>
        public event ossGetIpStatusCompletedEventHandler ossGetIpStatusCompleted;

        /// <remarks/>
        public event ossUpdateIpStatusCompletedEventHandler ossUpdateIpStatusCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/sendToBCCS", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendToBCCS(
                    string createUserCode,
                    string custName,
                    string companyName,
                    string address,
                    string tin,
                    string telNumber,
                    string transCode,
                    revenueItem[] lstRevenueItem,
                    System.DateTime saleTransDate,
                    [System.Xml.Serialization.XmlElementAttribute("transDateSpecified")] bool transDateSpecified1,
                    string revenueObjectCode,
                    string transType,
                    string saleTransType,
                    string requestType,
                    string checkCreateInvoice,
                    string appCode,
                    string username,
                    string password)
        {
            object[] results = this.Invoke("sendToBCCS", new object[] {
                    createUserCode,
                    custName,
                    companyName,
                    address,
                    tin,
                    telNumber,
                    transCode,
                    lstRevenueItem,
                    saleTransDate,
                    transDateSpecified1,
                    revenueObjectCode,
                    transType,
                    saleTransType,
                    requestType,
                    checkCreateInvoice,
                    appCode,
                    username,
                    password});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsendToBCCS(
                    string createUserCode,
                    string custName,
                    string companyName,
                    string address,
                    string tin,
                    string telNumber,
                    string transCode,
                    revenueItem[] lstRevenueItem,
                    System.DateTime saleTransDate,
                    bool transDateSpecified1,
                    string revenueObjectCode,
                    string transType,
                    string saleTransType,
                    string requestType,
                    string checkCreateInvoice,
                    string appCode,
                    string username,
                    string password,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("sendToBCCS", new object[] {
                    createUserCode,
                    custName,
                    companyName,
                    address,
                    tin,
                    telNumber,
                    transCode,
                    lstRevenueItem,
                    saleTransDate,
                    transDateSpecified1,
                    revenueObjectCode,
                    transType,
                    saleTransType,
                    requestType,
                    checkCreateInvoice,
                    appCode,
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public string EndsendToBCCS(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void sendToBCCSAsync(
                    string createUserCode,
                    string custName,
                    string companyName,
                    string address,
                    string tin,
                    string telNumber,
                    string transCode,
                    revenueItem[] lstRevenueItem,
                    System.DateTime saleTransDate,
                    bool transDateSpecified1,
                    string revenueObjectCode,
                    string transType,
                    string saleTransType,
                    string requestType,
                    string checkCreateInvoice,
                    string appCode,
                    string username,
                    string password)
        {
            this.sendToBCCSAsync(createUserCode, custName, companyName, address, tin, telNumber, transCode, lstRevenueItem, saleTransDate, transDateSpecified1, revenueObjectCode, transType, saleTransType, requestType, checkCreateInvoice, appCode, username, password, null);
        }

        /// <remarks/>
        public void sendToBCCSAsync(
                    string createUserCode,
                    string custName,
                    string companyName,
                    string address,
                    string tin,
                    string telNumber,
                    string transCode,
                    revenueItem[] lstRevenueItem,
                    System.DateTime saleTransDate,
                    bool transDateSpecified1,
                    string revenueObjectCode,
                    string transType,
                    string saleTransType,
                    string requestType,
                    string checkCreateInvoice,
                    string appCode,
                    string username,
                    string password,
                    object userState)
        {
            if ((this.sendToBCCSOperationCompleted == null))
            {
                this.sendToBCCSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendToBCCSOperationCompleted);
            }
            this.InvokeAsync("sendToBCCS", new object[] {
                    createUserCode,
                    custName,
                    companyName,
                    address,
                    tin,
                    telNumber,
                    transCode,
                    lstRevenueItem,
                    saleTransDate,
                    transDateSpecified1,
                    revenueObjectCode,
                    transType,
                    saleTransType,
                    requestType,
                    checkCreateInvoice,
                    appCode,
                    username,
                    password}, this.sendToBCCSOperationCompleted, userState);
        }

        private void OnsendToBCCSOperationCompleted(object arg)
        {
            if ((this.sendToBCCSCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendToBCCSCompleted(this, new sendToBCCSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/Verify_Login", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Verify_Login(string username, string password)
        {
            object[] results = this.Invoke("Verify_Login", new object[] {
                    username,
                    password});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginVerify_Login(string username, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Verify_Login", new object[] {
                    username,
                    password}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndVerify_Login(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void Verify_LoginAsync(string username, string password)
        {
            this.Verify_LoginAsync(username, password, null);
        }

        /// <remarks/>
        public void Verify_LoginAsync(string username, string password, object userState)
        {
            if ((this.Verify_LoginOperationCompleted == null))
            {
                this.Verify_LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerify_LoginOperationCompleted);
            }
            this.InvokeAsync("Verify_Login", new object[] {
                    username,
                    password}, this.Verify_LoginOperationCompleted, userState);
        }

        private void OnVerify_LoginOperationCompleted(object arg)
        {
            if ((this.Verify_LoginCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Verify_LoginCompleted(this, new Verify_LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/sendMail", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendMail(string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml)
        {
            object[] results = this.Invoke("sendMail", new object[] {
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsendMail(string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("sendMail", new object[] {
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml}, callback, asyncState);
        }

        /// <remarks/>
        public string EndsendMail(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void sendMailAsync(string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml)
        {
            this.sendMailAsync(mailTo, mailCc, mailBcc, mailSubject, mailBody, isBodyHtml, null);
        }

        /// <remarks/>
        public void sendMailAsync(string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, object userState)
        {
            if ((this.sendMailOperationCompleted == null))
            {
                this.sendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMailOperationCompleted);
            }
            this.InvokeAsync("sendMail", new object[] {
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml}, this.sendMailOperationCompleted, userState);
        }

        private void OnsendMailOperationCompleted(object arg)
        {
            if ((this.sendMailCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMailCompleted(this, new sendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/sendMailFrom", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendMailFrom(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml)
        {
            object[] results = this.Invoke("sendMailFrom", new object[] {
                    from,
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsendMailFrom(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("sendMailFrom", new object[] {
                    from,
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml}, callback, asyncState);
        }

        /// <remarks/>
        public string EndsendMailFrom(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void sendMailFromAsync(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml)
        {
            this.sendMailFromAsync(from, mailTo, mailCc, mailBcc, mailSubject, mailBody, isBodyHtml, null);
        }

        /// <remarks/>
        public void sendMailFromAsync(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, object userState)
        {
            if ((this.sendMailFromOperationCompleted == null))
            {
                this.sendMailFromOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMailFromOperationCompleted);
            }
            this.InvokeAsync("sendMailFrom", new object[] {
                    from,
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml}, this.sendMailFromOperationCompleted, userState);
        }

        private void OnsendMailFromOperationCompleted(object arg)
        {
            if ((this.sendMailFromCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMailFromCompleted(this, new sendMailFromCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/sendMailAttach", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendMailAttach(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, string attachFiles)
        {
            object[] results = this.Invoke("sendMailAttach", new object[] {
                    from,
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml,
                    attachFiles});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginsendMailAttach(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, string attachFiles, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("sendMailAttach", new object[] {
                    from,
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml,
                    attachFiles}, callback, asyncState);
        }

        /// <remarks/>
        public string EndsendMailAttach(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void sendMailAttachAsync(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, string attachFiles)
        {
            this.sendMailAttachAsync(from, mailTo, mailCc, mailBcc, mailSubject, mailBody, isBodyHtml, attachFiles, null);
        }

        /// <remarks/>
        public void sendMailAttachAsync(string from, string mailTo, string mailCc, string mailBcc, string mailSubject, string mailBody, bool isBodyHtml, string attachFiles, object userState)
        {
            if ((this.sendMailAttachOperationCompleted == null))
            {
                this.sendMailAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMailAttachOperationCompleted);
            }
            this.InvokeAsync("sendMailAttach", new object[] {
                    from,
                    mailTo,
                    mailCc,
                    mailBcc,
                    mailSubject,
                    mailBody,
                    isBodyHtml,
                    attachFiles}, this.sendMailAttachOperationCompleted, userState);
        }

        private void OnsendMailAttachOperationCompleted(object arg)
        {
            if ((this.sendMailAttachCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMailAttachCompleted(this, new sendMailAttachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/getInPool", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getInPool(string owner, int total, string location, string lastIp, string note)
        {
            object[] results = this.Invoke("getInPool", new object[] {
                    owner,
                    total,
                    location,
                    lastIp,
                    note});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetInPool(string owner, int total, string location, string lastIp, string note, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getInPool", new object[] {
                    owner,
                    total,
                    location,
                    lastIp,
                    note}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetInPool(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getInPoolAsync(string owner, int total, string location, string lastIp, string note)
        {
            this.getInPoolAsync(owner, total, location, lastIp, note, null);
        }

        /// <remarks/>
        public void getInPoolAsync(string owner, int total, string location, string lastIp, string note, object userState)
        {
            if ((this.getInPoolOperationCompleted == null))
            {
                this.getInPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInPoolOperationCompleted);
            }
            this.InvokeAsync("getInPool", new object[] {
                    owner,
                    total,
                    location,
                    lastIp,
                    note}, this.getInPoolOperationCompleted, userState);
        }

        private void OngetInPoolOperationCompleted(object arg)
        {
            if ((this.getInPoolCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInPoolCompleted(this, new getInPoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/updatePool", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updatePool(int status, string ipAddress, string owner, string note, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName)
        {
            object[] results = this.Invoke("updatePool", new object[] {
                    status,
                    ipAddress,
                    owner,
                    note,
                    cusAccName,
                    cusEmail,
                    vmName,
                    vAppName,
                    edgeName,
                    orgName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginupdatePool(int status, string ipAddress, string owner, string note, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("updatePool", new object[] {
                    status,
                    ipAddress,
                    owner,
                    note,
                    cusAccName,
                    cusEmail,
                    vmName,
                    vAppName,
                    edgeName,
                    orgName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndupdatePool(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void updatePoolAsync(int status, string ipAddress, string owner, string note, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName)
        {
            this.updatePoolAsync(status, ipAddress, owner, note, cusAccName, cusEmail, vmName, vAppName, edgeName, orgName, null);
        }

        /// <remarks/>
        public void updatePoolAsync(int status, string ipAddress, string owner, string note, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName, object userState)
        {
            if ((this.updatePoolOperationCompleted == null))
            {
                this.updatePoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePoolOperationCompleted);
            }
            this.InvokeAsync("updatePool", new object[] {
                    status,
                    ipAddress,
                    owner,
                    note,
                    cusAccName,
                    cusEmail,
                    vmName,
                    vAppName,
                    edgeName,
                    orgName}, this.updatePoolOperationCompleted, userState);
        }

        private void OnupdatePoolOperationCompleted(object arg)
        {
            if ((this.updatePoolCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePoolCompleted(this, new updatePoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/updateIpPool", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ossInfo updateIpPool(int status, string ipAddress, string owner, string note, int cusId, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName)
        {
            object[] results = this.Invoke("updateIpPool", new object[] {
                    status,
                    ipAddress,
                    owner,
                    note,
                    cusId,
                    cusAccName,
                    cusEmail,
                    vmName,
                    vAppName,
                    edgeName,
                    orgName});
            return ((ossInfo)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginupdateIpPool(int status, string ipAddress, string owner, string note, int cusId, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("updateIpPool", new object[] {
                    status,
                    ipAddress,
                    owner,
                    note,
                    cusId,
                    cusAccName,
                    cusEmail,
                    vmName,
                    vAppName,
                    edgeName,
                    orgName}, callback, asyncState);
        }

        /// <remarks/>
        public ossInfo EndupdateIpPool(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ossInfo)(results[0]));
        }

        /// <remarks/>
        public void updateIpPoolAsync(int status, string ipAddress, string owner, string note, int cusId, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName)
        {
            this.updateIpPoolAsync(status, ipAddress, owner, note, cusId, cusAccName, cusEmail, vmName, vAppName, edgeName, orgName, null);
        }

        /// <remarks/>
        public void updateIpPoolAsync(int status, string ipAddress, string owner, string note, int cusId, string cusAccName, string cusEmail, string vmName, string vAppName, string edgeName, string orgName, object userState)
        {
            if ((this.updateIpPoolOperationCompleted == null))
            {
                this.updateIpPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateIpPoolOperationCompleted);
            }
            this.InvokeAsync("updateIpPool", new object[] {
                    status,
                    ipAddress,
                    owner,
                    note,
                    cusId,
                    cusAccName,
                    cusEmail,
                    vmName,
                    vAppName,
                    edgeName,
                    orgName}, this.updateIpPoolOperationCompleted, userState);
        }

        private void OnupdateIpPoolOperationCompleted(object arg)
        {
            if ((this.updateIpPoolCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateIpPoolCompleted(this, new updateIpPoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/ossGetIpStatus", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ossInfo ossGetIpStatus(string ip)
        {
            object[] results = this.Invoke("ossGetIpStatus", new object[] {
                    ip});
            return ((ossInfo)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginossGetIpStatus(string ip, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ossGetIpStatus", new object[] {
                    ip}, callback, asyncState);
        }

        /// <remarks/>
        public ossInfo EndossGetIpStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ossInfo)(results[0]));
        }

        /// <remarks/>
        public void ossGetIpStatusAsync(string ip)
        {
            this.ossGetIpStatusAsync(ip, null);
        }

        /// <remarks/>
        public void ossGetIpStatusAsync(string ip, object userState)
        {
            if ((this.ossGetIpStatusOperationCompleted == null))
            {
                this.ossGetIpStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnossGetIpStatusOperationCompleted);
            }
            this.InvokeAsync("ossGetIpStatus", new object[] {
                    ip}, this.ossGetIpStatusOperationCompleted, userState);
        }

        private void OnossGetIpStatusOperationCompleted(object arg)
        {
            if ((this.ossGetIpStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ossGetIpStatusCompleted(this, new ossGetIpStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api-utils.viettelidc.com.vn/ossUpdateIpStatus", RequestNamespace = "http://api-utils.viettelidc.com.vn/", ResponseNamespace = "http://api-utils.viettelidc.com.vn/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ossInfo ossUpdateIpStatus(string ip, int isActive, string info)
        {
            object[] results = this.Invoke("ossUpdateIpStatus", new object[] {
                    ip,
                    isActive,
                    info});
            return ((ossInfo)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginossUpdateIpStatus(string ip, int isActive, string info, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ossUpdateIpStatus", new object[] {
                    ip,
                    isActive,
                    info}, callback, asyncState);
        }

        /// <remarks/>
        public ossInfo EndossUpdateIpStatus(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ossInfo)(results[0]));
        }

        /// <remarks/>
        public void ossUpdateIpStatusAsync(string ip, int isActive, string info)
        {
            this.ossUpdateIpStatusAsync(ip, isActive, info, null);
        }

        /// <remarks/>
        public void ossUpdateIpStatusAsync(string ip, int isActive, string info, object userState)
        {
            if ((this.ossUpdateIpStatusOperationCompleted == null))
            {
                this.ossUpdateIpStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnossUpdateIpStatusOperationCompleted);
            }
            this.InvokeAsync("ossUpdateIpStatus", new object[] {
                    ip,
                    isActive,
                    info}, this.ossUpdateIpStatusOperationCompleted, userState);
        }

        private void OnossUpdateIpStatusOperationCompleted(object arg)
        {
            if ((this.ossUpdateIpStatusCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ossUpdateIpStatusCompleted(this, new ossUpdateIpStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://process.wsim.viettel.com/")]
    public partial class revenueItem
    {

        private string amountField;

        private string discountAmountField;

        private string fromSerialField;

        private string licenseKeyField;

        private string priceTypeField;

        private long quantityField;

        private bool quantityFieldSpecified;

        private string stockModelCodeField;

        private long stockModelIdField;

        private bool stockModelIdFieldSpecified;

        private long telecomServiceIdField;

        private bool telecomServiceIdFieldSpecified;

        private string toSerialField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string amount
        {
            get
            {
                return this.amountField;
            }
            set
            {
                this.amountField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string discountAmount
        {
            get
            {
                return this.discountAmountField;
            }
            set
            {
                this.discountAmountField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fromSerial
        {
            get
            {
                return this.fromSerialField;
            }
            set
            {
                this.fromSerialField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string licenseKey
        {
            get
            {
                return this.licenseKeyField;
            }
            set
            {
                this.licenseKeyField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string priceType
        {
            get
            {
                return this.priceTypeField;
            }
            set
            {
                this.priceTypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long quantity
        {
            get
            {
                return this.quantityField;
            }
            set
            {
                this.quantityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quantitySpecified
        {
            get
            {
                return this.quantityFieldSpecified;
            }
            set
            {
                this.quantityFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string stockModelCode
        {
            get
            {
                return this.stockModelCodeField;
            }
            set
            {
                this.stockModelCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long stockModelId
        {
            get
            {
                return this.stockModelIdField;
            }
            set
            {
                this.stockModelIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stockModelIdSpecified
        {
            get
            {
                return this.stockModelIdFieldSpecified;
            }
            set
            {
                this.stockModelIdFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long telecomServiceId
        {
            get
            {
                return this.telecomServiceIdField;
            }
            set
            {
                this.telecomServiceIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool telecomServiceIdSpecified
        {
            get
            {
                return this.telecomServiceIdFieldSpecified;
            }
            set
            {
                this.telecomServiceIdFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string toSerial
        {
            get
            {
                return this.toSerialField;
            }
            set
            {
                this.toSerialField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://api-utils.viettelidc.com.vn/")]
    public partial class ossInfo
    {

        private bool statusField;

        private string errorField;

        private string dateCreateField;

        /// <remarks/>
        public bool status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        /// <remarks/>
        public string error
        {
            get
            {
                return this.errorField;
            }
            set
            {
                this.errorField = value;
            }
        }

        /// <remarks/>
        public string dateCreate
        {
            get
            {
                return this.dateCreateField;
            }
            set
            {
                this.dateCreateField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void sendToBCCSCompletedEventHandler(object sender, sendToBCCSCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendToBCCSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal sendToBCCSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void Verify_LoginCompletedEventHandler(object sender, Verify_LoginCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Verify_LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal Verify_LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void sendMailCompletedEventHandler(object sender, sendMailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal sendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void sendMailFromCompletedEventHandler(object sender, sendMailFromCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMailFromCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal sendMailFromCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void sendMailAttachCompletedEventHandler(object sender, sendMailAttachCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMailAttachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal sendMailAttachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void getInPoolCompletedEventHandler(object sender, getInPoolCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInPoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getInPoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void updatePoolCompletedEventHandler(object sender, updatePoolCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updatePoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updatePoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void updateIpPoolCompletedEventHandler(object sender, updateIpPoolCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateIpPoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal updateIpPoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ossInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ossInfo)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ossGetIpStatusCompletedEventHandler(object sender, ossGetIpStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ossGetIpStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ossGetIpStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ossInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ossInfo)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ossUpdateIpStatusCompletedEventHandler(object sender, ossUpdateIpStatusCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ossUpdateIpStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ossUpdateIpStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ossInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ossInfo)(this.results[0]));
            }
        }
    }
}
